from telebot import TeleBot
from telebot.types import Message, CallbackQuery, BotCommand, InputMediaAudio, InputMediaPhoto
from config import SYSTEM_PROMPT, SYSTEM_PROMPT_TRANSLATION
from creds import get_bot_token
from validation import (is_user_amount_limit, is_gpt_tokens_limit_per_message)
from database import (create_table_tests, add_user_to_tests_table, get_tests_info, is_user_in_tests, add_level_info,
                      create_table_prompts, create_table_limits, user_in_table, is_user_in_limits,
                      insert_row_into_limits, update_tts_tokens_in_limits, insert_row_into_prompts,
                      update_stt_blocks_in_limits, update_gpt_tokens_in_limits, update_amount_of_secs, get_last_session,
                      update_session_id, get_start_dialog, get_theme_dialog, update_start_dialog, update_theme_dialog,
                      update_message_translation, get_last_message_and_translation,
                      create_table_user_words, is_user_in_user_words, get_user_words_info, add_user_to_user_words,
                      add_level_user_words_info, create_table_all_words, is_user_in_all_words_table,
                      add_user_to_all_words_table, get_info_all_words, add_info_all_words, update_location_all_words,
                      add_bound_for_repeating_words, update_info_all_words, get_all_user_info, update_repeat_words_id,
                      limit_reset_db)
import logging
from math import ceil
from keyboards import menu_keyboard, inline_menu_keyboard
from info import topics
from utils import get_markdownv2_text, get_word, deque_manipulation, deleting_tildas, print_result, user_words_stat
from dialog_pipeline import stt, ttt, tts
import random
import json
from vocab import translate
import time
from PIL import Image
bot = TeleBot(token=get_bot_token())


@bot.message_handler(commands=['limit_reset'])
def limit_reset(message: Message):
    limit_reset_db(message.from_user.id)


# –°—é–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ–≥–¥–∞ –æ–Ω —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.
def translate_user_message(message: Message):
    user_id = message.from_user.id
    # –¢–∞–∫ –∫–∞–∫ –º—ã —Ö—Ä–∞–Ω–∏–º —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏, –æ—Ç–¥–µ–ª–µ–Ω–Ω—ã–µ –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞ ~, —Ç–æ –º—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–ø–∏—Å–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
    user_word = deleting_tildas(message.text)
    if not user_word:
        bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–∑—É –∏–ª–∏ —Å–ª–æ–≤–æ ‚û°')
        return
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —á—Ç–æ-—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
    if len(user_word) > 100:
        markup = inline_menu_keyboard([['‚ùå –í—ã—Ö–æ–¥', 'exit_adding_word']], rows=1)
        bot.send_message(user_id, '–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–º–µ–Ω—å—à–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.', reply_markup=markup)
        bot.register_next_step_handler(message, callback=translate_user_message)
        return

    text, audio = translate(user_word)
    update_info_all_words(user_id, 'user_words', user_word)
    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–æ–≤–∞
    if not text:
        update_location_all_words(user_id, 'adding_translation')
        bot.send_message(user_id, '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–∞—à–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥ ‚û°')
        bot.register_next_step_handler(message, callback=user_translation)
        return
    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É, —Ç–æ –¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥ –∏–ª–∏ –∂–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    markup = inline_menu_keyboard([['–û—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ ‚úÖ', 'leave_api_translation'],
                                   ['–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥ ‚û°', 'adding_own_translation']], rows=2)
    bot.send_message(user_id, text, reply_markup=markup)


# –ó–¥–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –æ–Ω –≤–≤–æ–¥–∏—Ç —Å–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
def user_translation(message: Message):
    user_id = message.from_user.id
    # –ò–∑–±–∞–≤–ª—è–µ–º—Å—è –æ—Ç —Ç–∏–ª—å–¥
    user_word = deleting_tildas(message.text)
    if not user_word:
        bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ ‚û°')
        return
    update_location_all_words(user_id, 'None')
    # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ñ—Ä–∞–∑—ã
    if len(user_word) > 150:
        bot.send_message(user_id, '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∫–æ—Ä–æ—á–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ ‚û°')
        bot.register_next_step_handler(message, callback=user_translation)
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥
    add_info_all_words(user_id, 'translation', user_word)
    # –≤ "user_word" –º—ã –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –ø–æ–∂–µ–ª–∞–ª –¥–æ–±–∞–≤–∏—Ç—å(–∏–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –±—É—Ñ—Ñ–µ—Ä –¥–ª—è
    # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã—Ö –±–∞–≥–≥–æ–≤.
    word = get_info_all_words(user_id, 'user_words').split('~')[-1]
    add_info_all_words(user_id, 'words_to_learn', word)
    bot.send_message(user_id, '–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ')


@bot.message_handler(commands=['start'])
def start(message: Message):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ –ª–∏–º–∏—Ç–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤, –µ—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º.
    if not user_in_table(user_id):
        insert_row_into_limits(user_id)

        logging.info(f'New user_id {user_id} just connected')

    bot.send_message(user_id, ('Hello!‚úã –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É, –∏ —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n'
        '1. <b>–†–∞–∑–≤–∏–≤–∞—Ç—å –≤–∞—à –≤–æ–∫–∞–±—É–ª—è—Ä</b>: –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.\n'
        '2. <b>–û–±—â–∞—Ç—å—Å—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º</b>: –ü–æ–≥–æ–≤–æ—Ä–∏–º –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã, —á—Ç–æ–±—ã –í—ã –º–æ–≥–ª–∏ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è.\n'
        '3. <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –∑–Ω–∞–Ω–∏—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏</b>: –ü—Ä–æ–≤–µ–¥—É —Ç–µ—Å—Ç—ã –∏ –¥–∞–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.\n\n'
        '–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –≤–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –≤–º–µ—Å—Ç–µ! üöÄ\n\n'
        '–ñ–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu –∏ –≤–ø–µ—Ä–µ–¥!!!'), parse_mode='HTML')


@bot.message_handler(commands=['help'])
def helping(message: Message):
    user_id = message.from_user.id
    help_message = ('–ù–∞–∂–º–∏—Ç–µ /menu, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞, –∞ –∏–º–µ–Ω–Ω–æ: \n'
                    '1. üìù<b>–¢–µ—Å—Ç—ã</b>: –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç—ã –∏ —É–∑–Ω–∞–≤–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.\n'
                    '2. üîä<b>–î–∏–∞–ª–æ–≥</b>: –í—ã–±–∏—Ä–∞–π—Ç–µ —Ç–µ–º—É –∏ –æ–±—â–∞–π—Ç–µ—Å—å —Å –±–æ—Ç–æ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.\n'
                    '3. üìö<b>–í–æ–∫–∞–±—É–ª—è—Ä</b>: –ï—Å–ª–∏ –∫—Ä–∞—Ç–∫–æ, —Ç–æ –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º, –¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ –∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ\n'
                    '4. üìä<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</b>: –£–∑–Ω–∞–π—Ç–µ –æ–± —É—Å–ø–µ—Ö–∞—Ö –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ \n\n'
                    '–í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã‚ùì\n –°–∫–æ—Ä–µ–µ –Ω–∞—á–∏–Ω–∞–π –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º –∏ –≤—Å–µ –ø—Ä–æ—è—Å–Ω–∏—Ç—Å—è, –ø–æ—Ç–æ–º—É —á—Ç–æ –º—ã —Å—Ç–∞—Ä–∞–ª–∏—Å—å, —á—Ç–æ–±—ã –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º –±—ã–ª–æ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–º. –ù–æ –µ—Å–ª–∏ –æ—á–µ–Ω—å —Ö–æ—á–µ—à—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏ <a href = "https://github.com/LEONfromBRAWLSTARS/eng_bot_hacaton/blob/new/README.md">–ø–æ —Å—Å—ã–ª–∫–µ</a>')
    bot.send_message(user_id, help_message, parse_mode="HTML")


@bot.message_handler(commands=['menu'])
def menu(message: Message):
    user_id = message.from_user.id
    markup = inline_menu_keyboard([['üìù –¢–µ—Å—Ç—ã', 'tests'], ['üîä –î–∏–∞–ª–æ–≥', 'dialog'], ['üìö –í–æ–∫–∞–±—É–ª—è—Ä', 'vocabulary']], rows=3)
    bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:', reply_markup=markup)


@bot.message_handler(commands=['personal_stat'])
def personal_stat(message: Message):
    user_id = message.from_user.id
    seconds, known, unknown, tests_info = get_all_user_info(user_id)
    response = print_result(seconds, known, unknown, tests_info)
    bot.send_message(user_id, response, parse_mode='HTML')


@bot.message_handler(commands=['stop_dialog'])
def stop_dialog(message: Message):
    user_id = message.from_user.id
    if get_start_dialog(user_id) == 'False':
        bot.send_message(user_id, '–í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥ üîí')
    else:
        update_start_dialog(user_id, 'False')
        bot.send_message(user_id, '–î–∏–∞–ª–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚úÖ')


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call: CallbackQuery):
    user_id = call.message.chat.id
    # –º—ã –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –¢–µ—Å—Ç—ã
    if call.data == 'tests':
        try:
            bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
        except:
            bot.send_message(user_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ —á–µ—Ä–µ–∑ /menu –µ—â–µ —Ä–∞–∑')
            return
        if not is_user_in_tests(user_id):
            add_user_to_tests_table(user_id)
        markup = inline_menu_keyboard([['A1', 'A1'], ['A2', 'A2'], ['B1', 'B1'],
                                       ['B2', 'B2'], ['C1', 'C1'], ['C2', 'C2']], rows=2)
        bot.send_message(user_id, ('–í–Ω–∏–∑—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π, '
                                   '–≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∏ –≤–ø–µ—Ä–µ–¥! üí™'), reply_markup=markup)
    # –º—ã –≤—ã–±–∏—Ä–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Ç–µ—Å—Ç–æ–≤
    elif call.data in ['A1', 'A2', 'B1', 'B2', 'C1', 'C2']:
        try:
            bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
        except:
            bot.send_message(user_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∏ –Ω–µ–ø–æ–ª–∞–¥–∫–∏, –∑–∞–π–¥–∏—Ç–µ —Å—é–¥–∞ —á–µ—Ä–µ–∑ /menu –æ–ø—è—Ç—å')
            return
        # –µ—Å–ª–∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–ª–æ—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, —Ç–æ –º—ã –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
        if not is_user_in_tests(user_id):
            add_user_to_tests_table(user_id)

        chosen_level = call.data  # –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —É—Ä–æ–≤–µ–Ω—å (A1, A2, B1 ...)
        tests_of_level = tests_dict[chosen_level]  # –º—ã –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ—Å—Ç—ã –∏–∑ json —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        # –º—ã –±–µ—Ä–µ–º –∏–Ω—Ñ—É: state - –≤ –∫–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —Ç–µ—Å—Ç—É(None - –Ω–µ –Ω–∞—á–∏–Ω–∞–ª —Ç–µ—Å—Ç –≤–æ–æ–±—â–µ,
        # Start - –Ω–∞—á–∞–ª –µ–≥–æ –∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç, Finished - –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ—Å—Ç), num_of_question - –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞,
        # –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, amount_of_correct_answers - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ç–µ—Å—Ç–µ, message_id -
        # –Ω—É–∂–µ–Ω –±—É–¥–µ—Ç –≤ –±—É–¥—É—â–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã—Ö –±–∞–≥–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∫–Ω–æ–ø–∫–∞–º–∏.
        state, num_of_question, amount_of_correct_answers, message_id, *wrong_answers\
            = get_tests_info(user_id, chosen_level).split(', ')
        amount_of_questions = len(tests_of_level)  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ

        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç —É–∂–µ –ø—Ä–æ—à–µ–ª –∏ –Ω–∞–∂–∞–ª –Ω–∞ –Ω–µ–≥–æ –µ—â–µ —Ä–∞–∑, —Ç–æ –º—ã –µ–º—É –≥–æ–≤–æ—Ä–∏–º –æ–± —ç—Ç–æ–º.
        if state == 'Finished':
            markup = inline_menu_keyboard([['üîÅ –ü—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑', 'test_start_over'],
                                           ['‚ùå –í—ã–π—Ç–∏', 'exit']], rows=1)
            bot.send_message(chat_id=user_id,
                             text=(f'{chosen_level} —É—Ä–æ–≤–µ–Ω—å. –í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –¥–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, '
                                   f'—Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –µ–≥–æ –µ—â–µ —Ä–∞–∑?'), reply_markup=markup)
            return
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç, –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –µ–≥–æ –∏ –±—Ä–æ—Å–∏–ª, –∞ –ø–æ—Ç–æ–º –Ω–∞–∂–∞–ª –Ω–∞ –Ω–µ–≥–æ –µ—â–µ —Ä–∞–∑, —Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–º—É
        # –ª–∏–±–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç, –ª–∏–±–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        if state == "Start":
            # –º—ã —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ—Å—Ç–æ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–∞–≥–æ–≤ –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —á–∏—Å—Ç–æ—Ç—ã, –∫–∞–∫ —Ä–∞–∑ —Ç—É—Ç message_id
            # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. Message_id - id —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ—Å—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –º—ã —É–¥–∞–ª—è–µ–º
            try:
                bot.delete_message(chat_id=user_id, message_id=int(message_id))
            except:
                pass
            markup = inline_menu_keyboard([['‚û° –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 'test_continue'],
                                           ['üîÅ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞', 'test_start_over']], rows=1)
            message = bot.send_message(user_id, (f'<b>{chosen_level}</b> —É—Ä–æ–≤–µ–Ω—å. –£ –í–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. \n'
                                       f'–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?'), reply_markup=markup, parse_mode="HTML")
            add_level_info(user_id, chosen_level,
                           f'Start, {num_of_question}, {amount_of_correct_answers}, {message.message_id}, {", ".join(wrong_answers)}')
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–µ—Å—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ
        else:
            # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –Ω–∞—à–µ–≥–æ json
            question = tests_of_level[num_of_question]["question"]
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            markup = inline_menu_keyboard(tests_of_level[num_of_question]["options"].items(), rows=2)
            message = bot.send_message(user_id,
                                       (f'{call.data}. ‚ùì –í–æ–ø—Ä–æ—Å <em>{int(num_of_question)}</em>/{amount_of_questions}\n\n'
                                        f'{question}'), reply_markup=markup, parse_mode="HTML")
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Ç–∞–±–ª–∏—Ü–µ —Ç–µ—Å—Ç–æ–≤.
            # –°—Ç–æ–∏—Ç—å –∑–∞–º–µ—Ç–∏—Ç—å, —á—Ç–æ –º—ã –ø–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É, –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–∑–¥–µ–ª–µ–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.
            # –≠–ª–µ–º–µ–Ω—Ç—ã (state, num_of_question, amount_of_correct_answers, message_id). –Ø –∏—Ö —Ä–∞—Å–ø–∏—Å–∞–ª –≤–≤–µ—Ä—Ö—É
            add_level_info(user_id, chosen_level,
                           f'Start, {num_of_question}, {amount_of_correct_answers}, {message.message_id}, None')

    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", "–í—ã—Ö–æ–¥"
    elif call.data in ['test_continue', 'test_start_over', 'exit']:
        try:
            bot.edit_message_reply_markup(chat_id=user_id, message_id=call.message.message_id, reply_markup=None)
        except:
            bot.send_message(user_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∏ –Ω–µ–ø–æ–ª–∞–¥–∫–∏, –∑–∞–π–¥–∏—Ç–µ —Å—é–¥–∞ —á–µ—Ä–µ–∑ /menu –æ–ø—è—Ç—å')
            return
        if not is_user_in_tests(user_id):
            add_user_to_tests_table(user_id)
            bot.send_message(user_id, '–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Ç–µ—Å—Ç–∞–º —á–µ—Ä–µ–∑ /menu')
            return
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Ç–µ—Å—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Å–µ–π—á–∞—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å(—è —Å–¥–µ–ª–∞–ª —ç—Ç–æ –Ω–µ –æ—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤–æ, —Ç–∞–∫ –∫–∞–∫ —è –±–µ—Ä—É —É—Ä–æ–≤–µ–Ω—å
        # –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è(–ø–µ—Ä–≤—ã–µ –¥–≤–∞ –∑–Ω–∞–∫–∞), –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        # "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", "–í—ã—Ö–æ–¥" –Ω–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—Å–µ–≥–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        # —É—Ä–æ–≤–µ–Ω—å —Ç–µ—Å—Ç–∞ (–ê1, –ê2 ...) –∏ —Ç–∞–∫–∂–µ –Ω–∞–¥–æ —Å–º–æ—Ç—Ä–µ—Ç—å, –≥–¥–µ –º—ã —ç—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å –Ω–∞–ø–∏—Å–∞–ª–∏, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —Å—Ä–µ–∑–æ–º —Å—Ç—Ä–æ–∫–∏
        # –≤—ã–Ω—É—Ç—å —É—Ä–æ–≤–µ–Ω—å)
        level = call.message.text[:2]
        # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–í—ã—Ö–æ–¥". (–ú—ã —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≥–ª–∞–∑–∞ –Ω–µ –º–∞—è—á–∏–ª–æ –∏, –æ–ø—è—Ç—å –∂–µ, –∏–∑–±–µ–∂–∞—Ç—å –±–∞–≥–æ–≤)
        if call.data == 'exit':
            try:
                bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
            except:
                pass
        state, num_of_question, amount_of_correct_answers, message_id, *wrong_answers \
            = get_tests_info(user_id, level).split(', ')

        # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ". (–ú—ã –±–µ—Ä–µ–º –∏–Ω—Ñ—É –∏–∑ –ë–î –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç —Å —Ç–æ–≥–æ –∂–µ –º–µ—Å—Ç–∞)
        if call.data == 'test_continue':
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º —É–∫–∞–∑–∞–Ω–∞ –≤ 'if call.data in ['A1', 'A2'...' –≤–≤–µ—Ä—Ö—É. (–ú–æ–∂–µ—Ç–µ —á–µ—Ä–µ–∑ ctrl + F –Ω–∞–π—Ç–∏)
            tests_of_level = tests_dict[level]
            amount_of_questions = len(tests_of_level)
            question = tests_of_level[num_of_question]["question"]
            add_level_info(user_id, level,
                           (f'Start, {num_of_question}, {amount_of_correct_answers}, '
                            f'{call.message.id}, {", ".join(wrong_answers)}'))
            markup = inline_menu_keyboard(tests_of_level[num_of_question]["options"].items(), rows=2)
            bot.edit_message_text(chat_id=user_id, message_id=call.message.message_id,
                                  text=(f'{level}. ‚ùì –í–æ–ø—Ä–æ—Å <em>{int(num_of_question)}</em>/{amount_of_questions}\n\n'
                                        f'{question}'), reply_markup=markup, parse_mode="HTML")
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞". (–ú—ã –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å—é –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —ç—Ç–æ–º—É —Ç–µ—Å—Ç—É –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞)
        elif call.data == 'test_start_over':
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ—Å—Ç—É
            state = 'Start'
            num_of_question = '1'
            amount_of_correct_answers = 0
            message_id = call.message.message_id
            wrong_answers = ['None']
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ json
            tests_of_level = tests_dict[level]
            amount_of_questions = len(tests_of_level)
            question = tests_of_level[num_of_question]["question"]

            markup = inline_menu_keyboard(tests_of_level[num_of_question]["options"].items(), rows=2)
            bot.edit_message_text(chat_id=user_id, message_id=message_id,
                                  text=(f'{level}.‚ùì –í–æ–ø—Ä–æ—Å <em>{num_of_question}</em>/{amount_of_questions}\n\n'
                                        f'{question}'), reply_markup=markup, parse_mode="HTML")
            add_level_info(user_id, level, (f'{state}, {num_of_question}, {amount_of_correct_answers}, '
                                            f'{call.message.message_id}, {", ".join(wrong_answers)}'))
    # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
    elif call.data in ['1', '2', '3', '4']:
        try:
            bot.edit_message_reply_markup(chat_id=user_id, message_id=call.message.message_id, reply_markup=None)
        except:
            bot.send_message(user_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∏ –Ω–µ–ø–æ–ª–∞–¥–∫–∏, –∑–∞–π–¥–∏—Ç–µ —Å—é–¥–∞ —á–µ—Ä–µ–∑ /menu –æ–ø—è—Ç—å')
            return
        if not is_user_in_tests(user_id):
            bot.send_message(user_id, '–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ üîÉ')
            return
        # –û–ø—è—Ç—å –±–µ—Ä–µ–º —É—Ä–æ–≤–µ–Ω—å —Ç–µ—Å—Ç–∞
        level = call.message.text[:2]
        tests_of_level = tests_dict[level]
        state, num_of_question, amount_of_correct_answers, message_id, *wrong_answers\
            = get_tests_info(user_id, level).split(', ')
        amount_of_questions = len(tests_of_level)
        if int(num_of_question) > amount_of_questions:
            bot.send_message(user_id, '–û—à–∏–±–æ—á–∫–∞')
            return
        message_id = call.message.id  # maybe useless
        # –°–º–æ—Ç—Ä–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ—Ç–≤–µ—Ç –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –∞ –ø–æ—Ç–æ–º –µ—â–µ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏—Ö
        chosen_answer = call.data
        correct_answer = tests_of_level[num_of_question]['correct_answer']

        if chosen_answer == correct_answer:
            amount_of_correct_answers = int(amount_of_correct_answers) + 1
        else:
            if wrong_answers == ['None']:
                wrong_answers = [num_of_question]
            else:
                wrong_answers.append(num_of_question)
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–∞–≤–Ω—è–ª—Å—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ, —Ç–æ –º—ã –µ–≥–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º
        if int(num_of_question) == amount_of_questions:
            # –¢—É—Ç –º—ã –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Å–∞–π—Ç—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
            if wrong_answers == ['None']:
                references_for_studying = 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —É –í–∞—Å –Ω–µ—Ç –æ—à–∏–±–æ–∫! üéâ'
            else:
                references_for_studying = '–í–∞—à–∏ –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö —Å–≤—è–∑–∞–Ω—ã —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Ç–µ–º–∞–º–∏:\n'
                cnt = 1
                for num_of_wrong_ans in wrong_answers:
                    references_for_studying += f'{cnt}. ' + tests_of_level[num_of_wrong_ans]['keyword'] + '\n'
                    cnt += 1
                references_for_studying += 'üëÜ –ò–∑—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–º—ã –∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –µ—â–µ! üëÜ'

            bot.edit_message_text(chat_id=user_id, message_id=call.message.message_id,
                                  text=(f'–í —Ç–µ—Å—Ç–µ —É—Ä–æ–≤–Ω—è <b>{level}</b> –≤–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç <em>{amount_of_correct_answers}</em> '
                                        f'–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ {amount_of_questions}\n\n'
                                        f'{references_for_studying}'), disable_web_page_preview=True, parse_mode="HTML")
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ—É –æ —Ç–æ–º, —á—Ç–æ —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
            add_level_info(user_id, level, (f'Finished, {int(num_of_question)+1}, {amount_of_correct_answers},'
                                            f' {"None"}, {", ".join(wrong_answers)}'))
            return
        # –ò–Ω–∞—á–µ, –µ—Å–ª–∏ —Ç–µ—Å—Ç —É –Ω–∞—Å –∏–¥–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç –µ–≥–æ
        add_level_info(user_id, level, (f'Start, {int(num_of_question)+1}, {amount_of_correct_answers}, '
                                        f'{message_id}, {", ".join(wrong_answers)}'))
        question = tests_of_level[str(int(num_of_question) + 1)]["question"]
        markup = inline_menu_keyboard(tests_of_level[str(int(num_of_question) + 1)]["options"].items(), rows=2)
        bot.edit_message_text(chat_id=user_id, message_id=call.message.message_id,
                              text=(f'{level}. ‚ùì –í–æ–ø—Ä–æ—Å <em>{int(num_of_question) + 1}</em>/{amount_of_questions}\n\n'
                                    f'{question}'), reply_markup=markup, parse_mode="HTML")

    # –Ø –∏—Å–∫—Ä–µ–Ω–Ω–µ –ø—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏, –∫—Ç–æ —Ä–µ—à–∏—Ç –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏–µ 150-200 —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞.
    # –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–µ—Ç–≤—å –≤–æ–∫–∞–±—É–ª—è—Ä–∞
    elif call.data == 'vocabulary':
        try:
            bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
        except:
            bot.send_message(user_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∏ –Ω–µ–ø–æ–ª–∞–¥–∫–∏, –∑–∞–π–¥–∏—Ç–µ —Å—é–¥–∞ —á–µ—Ä–µ–∑ /menu –æ–ø—è—Ç—å')
            return
        markup = inline_menu_keyboard([['üí° –£—á–∏—Ç—å —Å–ª–æ–≤–∞ –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è', 'learn_new_words'],
                                       ['üî† –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ —Å–ª–æ–≤–∞', 'add_new_words'],
                                       ['üîÉ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–∑—É—á–µ–Ω–Ω—ã–µ', 'repeat_words'],
                                       ['üìã –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤', 'print_list']], rows=1)
        bot.send_message(user_id, '–û–ø—Ü–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∏–∂–µ üëá', reply_markup=markup)
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞" –∏–∑ json —Ñ–∞–π–ª–∞
    elif call.data == 'learn_new_words':
        try:
            bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
        except:
            bot.send_message(user_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∏ –Ω–µ–ø–æ–ª–∞–¥–∫–∏, –∑–∞–π–¥–∏—Ç–µ —Å—é–¥–∞ —á–µ—Ä–µ–∑ /menu –æ–ø—è—Ç—å')
            return
        markup = inline_menu_keyboard([['A1', 'A1_words'], ['A2', 'A2_words'], ['B1', 'B1_words'],
                                       ['B2', 'B2_words'], ['C1', 'C1_words'], ['C2', 'C2_words']], rows=2)
        bot.send_message(user_id, '–í–Ω–∏–∑—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–≤, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∏ –≤–ø–µ—Ä–µ–¥!!! üî•',
                         reply_markup=markup)
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–≤
    elif call.data in ['A1_words', 'A2_words', 'B1_words', 'B2_words', 'C1_words', 'C2_words']:
        try:
            bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
        except:
            bot.send_message(user_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∏ –Ω–µ–ø–æ–ª–∞–¥–∫–∏, –∑–∞–π–¥–∏—Ç–µ —Å—é–¥–∞ —á–µ—Ä–µ–∑ /menu –æ–ø—è—Ç—å')
            return
        if not is_user_in_user_words(user_id):
            add_user_to_user_words(user_id)
        level = call.data[:2]
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ
        status, num_of_word, amount_of_learned, message_id = get_user_words_info(user_id, level).split(', ')
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—á–∞–ª —É—á–∏—Ç—å —Å–ª–æ–≤–∞, –Ω–æ –ø–æ—Ç–æ–º –µ—â–µ —Ä–∞–∑ –Ω–∞–∂–∞–ª —ç—Ç—É –∫–Ω–æ–ø–∫—É, —Ç–æ –º—ã –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –±–ª–æ–∫
        # —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫
        if status == 'Start':
            try:
                bot.delete_message(chat_id=user_id, message_id=int(message_id))
            except:
                bot.send_message(user_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∏ –Ω–µ–ø–æ–ª–∞–¥–∫–∏, –∑–∞–π–¥–∏—Ç–µ —Å—é–¥–∞ —á–µ—Ä–µ–∑ /menu –æ–ø—è—Ç—å')
                return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        word_to_show = words_dict[level][int(num_of_word)]
        # –û–±—Ä–∞—â–∞–µ–º—è –∫ –ê–ü–ò –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞, –æ–ø–∏—Å–∞–Ω–∏—è, –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è —Å–ª–æ–≤–∞
        amount_of_words = len(words_dict[level])
        if int(num_of_word) == amount_of_words:
            bot.edit_message_text(chat_id=user_id, message_id=call.message.message_id, text='–°–ª–æ–≤–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤ —É—Ä–æ–≤–Ω–µ')
            add_level_user_words_info(user_id, level, f'Finished, {num_of_word}, {amount_of_learned}, {message_id}')
            return
        text, audio = translate(word_to_show)
        if text == 'Error':
            bot.send_message(user_id, '‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ —Å–ª–æ–≤–∞—Ä–µ–º ‚õî')
            return
        while (not text or text == 'Error') and int(num_of_word) != amount_of_words: # –æ—Ñ–æ—Ä–º–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
            num_of_word = int(num_of_word) + 1
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            word_to_show = words_dict[level][int(num_of_word)]
            # –û–±—Ä–∞—â–∞–µ–º—è –∫ –ê–ü–ò –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞, –æ–ø–∏—Å–∞–Ω–∏—è, –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è —Å–ª–æ–≤–∞
            text, audio = translate(word_to_show)
        if int(num_of_word) == amount_of_words:
            bot.send_message(user_id, 'üëè –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞!')
            return
        markup = inline_menu_keyboard([['‚úÖ –ó–Ω–∞—é', f'{level}_known_word'], ['‚ùì –ù–µ –∑–Ω–∞—é', f'{level}_unknown_word'],
                                       ['‚ùå –í—ã—Ö–æ–¥', f'{level}_exit']], rows=2)
        text = get_markdownv2_text(text)
        # –ï—Å–ª–∏ –º—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ
        if text and audio:
            try:
                message = bot.send_audio(user_id, audio=audio, caption=text, reply_markup=markup, parse_mode='MarkdownV2',
                                         title=word_to_show, performer='English_team_hack')
            except:
                message = bot.send_audio(user_id, audio=audio, caption=text, reply_markup=markup,
                                         title=word_to_show, performer='English_team_hack')
            add_level_user_words_info(user_id, level, f'Start, {num_of_word}, {amount_of_learned}, {message.message_id}')
        # –ï—Å–ª–∏ –º—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥
        elif text:
            try:
                message = bot.send_photo(user_id, photo=image, caption=text, reply_markup=markup, parse_mode='MarkdownV2')
            except:
                message = bot.send_photo(user_id, photo=image, caption=text, reply_markup=markup)
            add_level_user_words_info(user_id, level, f'Start, {num_of_word}, {amount_of_learned}, {message.message_id}')
        # –ï—Å–ª–∏ –º—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –Ω–∏ –ø–µ—Ä–µ–≤–æ–¥–∞, –Ω–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
        else:
            bot.send_message(user_id, '‚õî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ ‚õî')
            return

    elif call.data in ['A1_known_word', 'A1_unknown_word', 'A2_known_word', 'A2_unknown_word',
                       'B1_known_word', 'B1_unknown_word', 'B2_known_word', 'B2_unknown_word',
                       'C1_known_word', 'C1_unknown_word', 'C2_known_word', 'C2_unknown_word',
                       'A1_exit', 'A2_exit', 'B1_exit', 'B2_exit', 'C1_exit', 'C2_exit']:
        try:
            markup = inline_menu_keyboard([['‚úÖ –ó–Ω–∞—é', f'Null'], ['‚ùì –ù–µ –∑–Ω–∞—é', f'Null'],
                                           ['‚ùå –í—ã—Ö–æ–¥', f'Null']], rows=2)
            bot.edit_message_reply_markup(chat_id=user_id, message_id=call.message.message_id, reply_markup=markup)
        except:
            bot.send_message(user_id, '–û–ø–∞–Ω—å–∫–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∏ –Ω–µ–ø–æ–ª–∞–¥–∫–∏, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ —á–µ—Ä–µ–∑ /menu')
            return

        if not is_user_in_all_words_table(user_id):
            add_user_to_all_words_table(user_id)
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ—Ç —Ç–∞–∫–∏–º –≤–æ—Ç –≤–∞—Ä–≤–∞—Ä—Å–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º —É—Ä–æ–≤–µ–Ω—å, –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å–ª–æ–≤–æ
        level = call.data[:2]
        state = call.data[3:]
        prev_text = call.message.caption if call.message.caption else call.message.text
        word = get_word(prev_text)
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ—É
        status, num_of_word, amount_of_learned, message_id = get_user_words_info(user_id, level).split(', ')
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤–æ –≤ —É—Ä–æ–≤–Ω–µ
        amount_of_level_words = len(words_dict[level])
        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª —Å—Ä–∞–≤–Ω—è–ª–æ—Å—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–ª–æ–≤ –≤ —É—Ä–æ–≤–Ω–µ, —Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
        if int(num_of_word) + 1 == amount_of_level_words:
            bot.edit_message_text(chat_id=user_id, message_id=call.message.message_id, text='–°–ª–æ–≤–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤ —É—Ä–æ–≤–Ω–µ')
            add_level_user_words_info(user_id, level, f'Finished, {num_of_word}, {amount_of_learned}, {message_id}')
            return
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –≤—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
        if state == 'exit':
            add_level_user_words_info(user_id, level, f'None, {num_of_word}, {amount_of_learned}, None')
            try:
                bot.delete_message(chat_id=user_id, message_id=int(message_id))
                return
            except:
                return
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É, —á—Ç–æ –æ–Ω —É–∂–µ –∑–Ω–∞–µ—Ç —ç—Ç–æ —Å–ª–æ–≤–æ
        elif state == 'known_word':
            amount_of_learned = int(amount_of_learned) + 1
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ –∫–æ–ª–æ–Ω–∫—É —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω —É–∂–µ –∑–Ω–∞–µ—Ç
            add_info_all_words(user_id, 'learned_words', word)
            add_info_all_words(user_id, 'time', time.time())
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É, —á—Ç–æ –æ–Ω –Ω–µ –∑–Ω–∞–µ—Ç —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞
        elif state == 'unknown_word':
            add_info_all_words(user_id, 'words_to_learn', word)
            add_info_all_words(user_id, 'translation', 'None')
            add_info_all_words(user_id, 'time', time.time())

        num_of_word = int(num_of_word) + 1

        amount_of_words = len(words_dict[level])
        word_to_show = words_dict[level][int(num_of_word)]
        text, audio = translate(word_to_show)
        if text == 'Error':
            bot.send_message(user_id, '‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ —Å–ª–æ–≤–∞—Ä–µ–º ‚õî')
            return
        while (not text or text == 'Error') and int(num_of_word) != amount_of_words: # –æ—Ñ–æ—Ä–º–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
            num_of_word = int(num_of_word) + 1
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            word_to_show = words_dict[level][int(num_of_word)]
            # –û–±—Ä–∞—â–∞–µ–º—è –∫ –ê–ü–ò –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞, –æ–ø–∏—Å–∞–Ω–∏—è, –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è —Å–ª–æ–≤–∞
            text, audio = translate(word_to_show)
        if int(num_of_word) == amount_of_words:
            bot.send_message(user_id, 'üëè –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞')
            return
        text = get_markdownv2_text(text)
        markup = inline_menu_keyboard([['‚úÖ –ó–Ω–∞—é', f'{level}_known_word'], ['‚ùì –ù–µ –∑–Ω–∞—é', f'{level}_unknown_word'],
                                       ['‚ùå –í—ã—Ö–æ–¥', f'{level}_exit']], rows=2)
        if text and audio:
            #bot.send_audio(user_id, audio=audio, caption=text, reply_markup=markup)
            # –¢—É—Ç –∫–æ—Ä–æ—á–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏.
            try:
                new_audio = InputMediaAudio(media=audio, caption=text, title=word_to_show, performer='Englsh_team_hack',
                                            parse_mode='MarkdownV2')
                message = bot.edit_message_media(media=new_audio, chat_id=user_id,
                                                 message_id=message_id, reply_markup=markup)
            except:
                new_audio = InputMediaAudio(media=audio, caption=text, title=word_to_show, performer='Englsh_team_hack'
                                            )
                message = bot.edit_message_media(media=new_audio, chat_id=user_id,
                                                 message_id=message_id, reply_markup=markup)

            add_level_user_words_info(user_id, level, f'Start, {num_of_word}, {amount_of_learned}, {message.message_id}')

        elif text:
            try:
                image_to_sent = InputMediaPhoto(media=image, caption=text, parse_mode='MarkdownV2')
                message1 = bot.edit_message_media(media=image_to_sent, chat_id=user_id, message_id=message_id, reply_markup=markup)
            except:
                image_to_sent = InputMediaPhoto(media=image, caption=text)
                message1 = bot.edit_message_media(media=image_to_sent, chat_id=user_id, message_id=message_id,
                                                  reply_markup=markup)
            add_level_user_words_info(user_id, level, f'Start, {num_of_word}, {amount_of_learned}, {message1.message_id}')
        else:
            bot.send_message(user_id, '‚õî –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ ‚õî')
            return
    # –†–µ–∂–∏–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ —Å–ª–æ–≤–∞
    elif call.data == 'add_new_words':
        if not is_user_in_all_words_table(user_id):
            add_user_to_all_words_table(user_id)
        try:
            bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
        except:
            bot.send_message(user_id, '–ï–ª–∫–∏-–ø–∞–ª–∫–∏, –Ω–µ–ø–æ–ª–∞–¥–∫–∞, –∑–∞–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /menu')
            return
        user_location = get_info_all_words(user_id, 'user_location')
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–¥—Ä—É–≥ —É–∂–µ –Ω–∞–∂–∏–º–∞–ª —ç—Ç—É –∫–Ω–æ–ø–∫—É, –≤–≤–µ–ª —Å–ª–æ–≤–æ, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥.
        if user_location == 'adding_translation':
            bot.send_message(user_id, '–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞ ‚û°')
            return
        # –î–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞, –µ—Å–ª–∏ –æ–Ω —Å–ª—É—á–∞–π–Ω–æ —Å—é–¥–∞ –∑–∞—à–µ–ª
        markup = inline_menu_keyboard([['–í—ã—Ö–æ–¥', 'exit_adding_word']], rows=1)
        bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ‚û°', reply_markup=markup)
        bot.register_next_step_handler(call.message, callback=translate_user_message)
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ö–æ—Ç–µ–ª –¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
    elif call.data == 'exit_adding_word':
        try:
            bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
        except:
            bot.send_message(user_id, '–û–π, –ø—Ä–æ–±–ª–µ–º–∫–∞, –≤–µ—Ä–Ω–∏—Ç–µ–ª—å —Å—é–¥–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /menu')
            return
        if not is_user_in_all_words_table(user_id):
            add_user_to_all_words_table(user_id)
            return
        update_location_all_words(user_id, 'None')
        bot.clear_step_handler_by_chat_id(user_id)
    # –¢—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∞–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å –ª–∏ –µ–º—É –ø–µ—Ä–µ–≤–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏–ª—Å—è –∏–∑ API, –ª–∏–±–æ –∂–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥
    elif call.data in ['leave_api_translation', 'adding_own_translation']:
        try:
            bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
        except:
            bot.send_message(user_id, '–û–π, –æ–π, –æ–π, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /menu')
            return
        if not is_user_in_all_words_table(user_id):
            add_user_to_all_words_table(user_id)
            bot.send_message(user_id, '–í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ—Ä–µ–∑ /menu')
            try:
                bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
            except:
                return
        # –û—Å—Ç–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ API
        if call.data == 'leave_api_translation':
            update_location_all_words(user_id, 'None')
            word = get_info_all_words(user_id, 'user_words').split('~')[-1]
            add_info_all_words(user_id, 'words_to_learn', word)
            add_info_all_words(user_id, 'translation', call.message.text)
            bot.send_message(user_id, '–ü–µ—Ä–µ–≤–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ')
        # –î–æ–±–∞–≤–ª—è–µ—Ç —Å–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥
        elif call.data == 'adding_own_translation':
            bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ ‚û°')
            bot.register_next_step_handler(call.message, callback=user_translation)
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å —Å–ª–æ–≤–∞
    elif call.data == 'repeat_words':
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ —Å–ª–æ–≤, –∑–Ω–∞—á–∏—Ç —É –Ω–µ–≥–æ –Ω–µ—Ç —Å–ª–æ–≤
        try:
            bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
        except:
            bot.send_message(user_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∏ –Ω–µ–ø–æ–ª–∞–¥–∫–∏, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ —á–µ—Ä–µ–∑ /menu')
            return
        if not is_user_in_all_words_table(user_id):
            add_user_to_all_words_table(user_id)
            bot.send_message(user_id, '–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.')
            try:
                bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
            except:
                return
        message_id_prev_block = get_info_all_words(user_id, 'repeat_words')
        if message_id_prev_block != 'None':
            try:
                bot.delete_message(chat_id=user_id, message_id=int(message_id_prev_block))
            except:
                bot.send_message(user_id, '–ù–µ–ø–æ–ª–∞–¥–æ—á–∫–∏, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ /menu —Å—é–¥–∞')
                return
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–æ
        word = get_info_all_words(user_id, 'words_to_learn').split('~')[0]
        if not word:
            bot.send_message(user_id, '–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.')
            return
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        translation = get_info_all_words(user_id, 'translation').split('~')[0]
        # –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞(—ç—Ç–æ —Å–ª–æ–≤–æ –¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,—Ç–∞–∫ –∫–∞–∫ –¥–ª—è —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥,
        # –∞ –¥–ª—è —Å–ª–æ–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä—è - –Ω–µ—Ç
        if translation.strip() == 'None':
            translation, audio = translate(word, state='not_showing_word')
        translation = get_markdownv2_text(translation)
        word = get_markdownv2_text(word)
        # –≠—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π, —Ç–∞–∫ —Å–∫–∞–∂–µ–º, —Ñ–ª–∞–≥, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–Ω–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –ø–æ–≤—Ç–æ—Ä—è—Ç—å
        # —Å–ª–æ–≤–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π. –í —Å–ª–µ–¥—É—é—â–µ–º –±–ª–æ–∫–µ –æ–ø–∏—Å–∞–Ω–æ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ
        add_bound_for_repeating_words(user_id, word)
        # maybe need to clear addition words
        markup = inline_menu_keyboard([['üîÉ –ï—â–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å', 'not_learned_word_yet'],
                                       ['‚úÖ –£–∂–µ –∑–Ω–∞—é', 'learned_word']], rows=2)
        try:
            message = bot.send_message(user_id, f'{word}\n||{translation}||', reply_markup=markup, parse_mode='MarkdownV2')
        except:
            message = bot.send_message(user_id, f'{word}\n{translation}', reply_markup=markup)
        update_repeat_words_id(user_id, message.message_id)
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤—ã—É—á–∏–ª —Å–ª–æ–≤–æ –∏ —Ö–æ—á–µ—Ç –≤ –±—É–¥—É—â–µ–º –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å, –∏–ª–∏ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—É—á–∏–ª –µ–≥–æ –∏ –Ω–µ –Ω–∞–¥–æ
    # —ç—Ç–æ —Å–ª–æ–≤–æ –±–æ–ª—å—à–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å.
    elif call.data in ['not_learned_word_yet', 'learned_word']:
        try:
            markup = inline_menu_keyboard([['üîÉ –ï—â–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å', f'Null'], ['‚úÖ –£–∂–µ –∑–Ω–∞—é', f'Null']], rows=2)
            bot.edit_message_reply_markup(chat_id=user_id, message_id=call.message.message_id, reply_markup=markup)
        except:
            bot.send_message(user_id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /menu')
            return
        if not is_user_in_all_words_table(user_id):
            add_user_to_all_words_table(user_id)
            bot.send_message(user_id, '–ù–∞–∂–º–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ /menu –∏ –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.')
            try:
                bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
            except:
                return
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥—ã
        words = get_info_all_words(user_id, 'words_to_learn').split('~')[:-1]
        translations = get_info_all_words(user_id, 'translation').split('~')[:-1]
        bound_word = get_info_all_words(user_id, 'bound_for_repeating_words')
        if call.data == 'not_learned_word_yet':
            # –¢—É—Ç —Å–∞–º—ã–π –ø—Ä–∏–∫–æ–ª –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è, –∫–æ—Ä–æ—á–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –º–æ–¥—É–ª—å utils, —Ç–∞–º –æ–ø–∏—Å–∞–Ω–æ
            updated_words = deque_manipulation(words, 'stay')
            updated_translations = deque_manipulation(translations, 'stay')
        elif call.data == 'learned_word':
            updated_words = deque_manipulation(words, 'remove')
            updated_translations = deque_manipulation(translations, 'remove')
            add_info_all_words(user_id, 'learned_words', words[0])
        if updated_words and updated_translations:
            update_info_all_words(user_id, 'words_to_learn', '~'.join(updated_words)+'~')
            update_info_all_words(user_id, 'translation', '~'.join(updated_translations)+'~')
        else:
            update_info_all_words(user_id, 'words_to_learn', '')
            update_info_all_words(user_id, 'translation', '')
        # –£—Å–ª–æ–≤–∏–µ, –µ—Å–ª–∏ –º—ã –ø–æ–≤—Ç–æ—Ä–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞, –µ—Å–ª–∏ –Ω–∞—Ä–≤–∞–ª–∏—Å—å –Ω–∞
        if len(words) < 2 or words[1] == bound_word:
            bot.edit_message_text(chat_id=user_id, message_id=call.message.message_id, text='–í—ã –ø–æ–≤—Ç–æ—Ä–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞')
            add_info_all_words(user_id, 'bound_for_repeating_words', '')
            return
        # –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥.
        word = words[1]
        translation = translations[1]
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞.
        if translation.strip() == 'None':
            translation, audio = translate(word, state='not_showing_word')
        translation = get_markdownv2_text(translation)
        word = get_markdownv2_text(word)
        markup = inline_menu_keyboard([['üîÉ –ï—â–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å', 'not_learned_word_yet'],
                                       ['‚úÖ –£–∂–µ –∑–Ω–∞—é', 'learned_word']], rows=2)
        try:
            bot.edit_message_text(chat_id=user_id, message_id=call.message.message_id,
                              text=f'{word}\n||{translation}||', reply_markup=markup, parse_mode='MarkdownV2')
        except:
            bot.edit_message_text(chat_id=user_id, message_id=call.message.message_id,
                                  text=f'{word}\n{translation}', reply_markup=markup)

    elif call.data == "print_list":
        try:
            bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
        except:
            bot.send_message(user_id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /menu')
            return
        if not is_user_in_all_words_table(user_id):
            add_user_to_all_words_table(user_id)
        dont_know = get_info_all_words(user_id, 'words_to_learn').split('~')[:-1]
        know = get_info_all_words(user_id, 'learned_words').split('~')[:-1]
        response = user_words_stat(dont_know, know)
        bot.send_message(user_id, response, parse_mode='HTML')

    # –î–∞–ª—å—à–µ –∏–¥–µ—Ç –∫–æ–¥ –¥–ª—è –∫–Ω–æ–ø–æ—á–µ–∫ –¥–∏–∞–ª–æ–≥–∞
    elif call.data == 'dialog':
        if get_start_dialog(user_id) == 'True':
            bot.send_message(user_id, '–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ /stop_dialog')
            return
        try:
            bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
        except:
            bot.send_message(user_id, '–û—é—à–∫–∏, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ /menu')
            return
        if not is_user_in_limits(user_id):
            insert_row_into_limits(user_id)
        if not is_user_amount_limit(user_id):
            bot.send_message(user_id, ('–ë–æ—Ç –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. '
                                       '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –∏–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è. üò¢'))

            logging.info(f'Amount of users is full and user_id {user_id} tried to connect to the bot')
            return
        update_start_dialog(user_id, 'True')
        markup = inline_menu_keyboard([['–ó–∞–¥–∞–π —Ç—ã', 'dialog_bot'], ['–Ø –∑–∞–¥–∞–º', 'dialog_user']], rows=3)
        bot.send_message(user_id, '–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è –∑–∞–¥–∞–ª —Ç–µ–º—É –±–µ—Å–µ–¥—ã –∏–ª–∏ –∂–µ –≤—ã –∑–∞–¥–∞–¥–∏—Ç–µ –µ–µ —Å–∞–º–∏?', reply_markup=markup)

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å, –∫—Ç–æ –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∞—Ç–æ—Ä–æ–º –±–µ—Å–µ–¥—ã
    elif call.data in ['dialog_bot', 'dialog_user']:
        try:
            bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
        except:
            bot.send_message(user_id, '–û—é—à–∫–∏, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ /menu')
            return
        if not is_user_in_limits(user_id):
            insert_row_into_limits(user_id)
        # –ï—Å–ª–∏ –±–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –±–µ—Å–µ–¥—É, —Ç–æ –º—ã –±–µ—Ä–µ–º —Ä–∞–Ω–¥–æ–º–Ω—É—é —Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–µ–º topics –∏–∑ –º–æ–¥—É–ª—è info
        if call.data == 'dialog_bot':
            update_theme_dialog(user_id, 'bot')
            initial_text = random.choice(topics)
        elif call.data == 'dialog_user':
            update_theme_dialog(user_id, 'user')
            initial_text = 'What do you want to talk about?'

        last_session_id = get_last_session(user_id)
        insert_row_into_prompts((user_id, 'assistant', initial_text, last_session_id + 1))

        status, output = tts(user_id, initial_text)

        # –ï—Å–ª–∏ —É –Ω–∞—Å –≤—Å–µ —Å—É–ø–µ—Ä –∏ –º—ã –º–æ–∂–µ–º –¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–≤–µ—Ç
        if status == 'SUCCESS':
            update_tts_tokens_in_limits(user_id, len(initial_text))

            markup = menu_keyboard(['‚úç –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π'])

            bot.send_message(user_id, 'Here we go!!!\n–í—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /stop_dialog')
            bot.send_voice(user_id, output)
            text = get_markdownv2_text(initial_text)
            try:
                bot.send_message(user_id, f'"""||{text}||"""', parse_mode='MarkdownV2', reply_markup=markup)
            except:
                bot.send_message(user_id, text, reply_markup=markup)
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ø–µ—Ä—Å—è –≤ –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
        elif status == 'LIMITS':
            markup = menu_keyboard(['‚úç –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π'])
            bot.send_message(output)
            bot.send_message(user_id, 'Here we go!!!\n–í—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /stop_dialog')
            text = get_markdownv2_text(initial_text)
            try:
                bot.send_message(user_id, f'"""||{text}||"""', parse_mode='MarkdownV2', reply_markup=markup)
            except:
                bot.send_message(user_id, text, reply_markup=markup)
            return
        # –ï—Å–ª–∏ –º—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—à–∏–±–∫—É —Å –Ω–µ–π—Ä–æ–Ω–∫–æ–π
        elif status == 'IEM_ERROR':
            bot.send_message(output)
            return

        update_session_id(user_id, last_session_id+1)


# –°—é–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler(content_types=['voice', 'text'])
def chatting(message: Message):
    user_id = message.from_user.id

    if not is_user_in_limits(user_id):
        insert_row_into_limits(user_id)

    if get_start_dialog(user_id) == 'False':
        bot.send_message(user_id, "–í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥. üîí –ù–∞—á–Ω–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /menu")
        return

    if get_theme_dialog(user_id) == 'False':
        bot.send_message(user_id, '–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É –¥–∏–∞–ª–æ–≥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ.')
        return
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–∫—Å—Ç –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
    if message.text == '‚úç –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π':
        original_message, translated_message = get_last_message_and_translation(user_id)
        if translated_message:
            bot.send_message(user_id, '–¢–µ–∫—Å—Ç —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω.')
            return
        session_id = get_last_session(user_id)
        is_limit, tokens = is_gpt_tokens_limit_per_message(original_message, SYSTEM_PROMPT_TRANSLATION)
        status, translation = ttt(user_id, original_message, session_id, is_limit, 'translation')
        # –ï—Å–ª–∏ –≤—Å–µ —Å—É–ø–µ—Ä –∏ –º—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ–π—Ä–æ–Ω–∫–∏
        if status == 'SUCCESS':
            update_gpt_tokens_in_limits(user_id, tokens)
            session_id = get_last_session(user_id)
            bot.send_message(user_id, translation)
            update_message_translation(user_id, translation)
            return
        # –ï—Å–ª–∏ –≤—ã—Å–∫–æ—á–∏–ª–∞ –æ—à–∏–±–∫–∞ –∫–∞–∫–∞—è –ª–∏–±–æ
        elif status in ['IEM_ERROR', 'LIMIT', 'TTT_ERROR']:
            bot.send_message(user_id, translation)
            return

    if not is_user_amount_limit(user_id):
        bot.send_message(user_id, ('–ë–æ—Ç –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. '
                                   '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –∏–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è. üò•'))
        logging.info(f'Amount of users is full and user_id {user_id} tried to connect to the bot')
        return

    if not user_in_table(user_id):
        bot.send_message(user_id, '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ /start, –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.')
        logging.warning(f'User_id {user_id} got access to commands without registration')
        return
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ
    if message.content_type == 'voice':

        file_id = message.voice.file_id  # –ø–æ–ª—É—á–∞–µ–º id –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        file_info = bot.get_file(file_id)  # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        file = bot.download_file(file_info.file_path)  # —Å–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –°–Ω–∞—á–∞–ª–∞ –º—ã –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å –ø–æ–º–æ—â—å—é –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—â–∏–∫–∞
        status, output = stt(user_id, file, message.voice.duration, 'english')

        if status == 'SUCCESS':
            text = output
            update_amount_of_secs(user_id, message.voice.duration)
            update_stt_blocks_in_limits(user_id, ceil(message.voice.duration / 15))
        else:
            bot.send_message(user_id, output)
            return
        # –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å –ø–æ–º–æ—â—å—é –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—â–∏–∫–∞, —Ç–æ —ç—Ç–æ –ª–∏–±–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        # –Ω–∞—á–∞–ª –≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ —Ä—É—Å—Å–∫–∏ –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—â–∏–∫ –µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª, –ª–∏–±–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏—á–µ–≥–æ –Ω–µ —Å–∫–∞–∑–∞–ª, –ª–∏–±–æ —Å–∫–∞–∑–∞–ª –Ω–µ–≤–Ω—è—Ç–Ω–æ
        if not text:
            # –ú—ã –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Ä—É—Å—Å–∫–∏–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—â–∏–∫–æ–º
            status, output = stt(user_id, file, message.voice.duration, 'russian')

            if status == 'SUCCESS':
                text = output
                update_amount_of_secs(user_id, message.voice.duration)
                update_stt_blocks_in_limits(user_id, ceil(message.voice.duration / 15))
            else:
                bot.send_message(user_id, output)
                return
        # –ï—Å–ª–∏ –∏ —Ä—É—Å—Å–∫–∏–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—â–∏–∫ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª, —Ç–æ –º—ã –≤—ã–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if not text:
            bot.send_message(user_id, '‚õî –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –£—á—Ç–∏—Ç–µ, —á—Ç–æ –±–æ—Ç –ø–æ–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ —Ä—É—Å—Å–∫–∏–π ‚õî')
            return
    # –≠—Ç–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –Ω–µ –≥–æ–ª–æ—Å–æ–≤—ã–º –≤–≤–æ–¥–æ–º, –∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–º.
    else:
        text = message.text

    session_id = get_last_session(user_id)
    insert_row_into_prompts((user_id, "user", text, session_id))
    is_limit, tokens = is_gpt_tokens_limit_per_message(text, SYSTEM_PROMPT)
    status, gpt_text = ttt(user_id, text, session_id, is_limit, 'generating')

    if status == 'SUCCESS':
        update_gpt_tokens_in_limits(user_id, tokens)
        session_id = get_last_session(user_id)
        insert_row_into_prompts((user_id, "assistant", gpt_text, session_id))
    else:
        bot.send_message(user_id, gpt_text)
        return

    status, output = tts(user_id, gpt_text)
    markup = menu_keyboard(['‚úç –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π'])

    if status == 'SUCCESS':
        update_tts_tokens_in_limits(user_id, len(gpt_text))

        bot.send_voice(user_id, output)
        text = get_markdownv2_text(gpt_text)
        try:
            bot.send_message(user_id, f'"""||{text}||"""', parse_mode='MarkdownV2', reply_markup=markup)
        except:
            bot.send_message(user_id, text, reply_markup=markup)

    else:
        bot.send_message(user_id, gpt_text)
        bot.send_message(user_id, output, reply_markup=markup)


if __name__ == '__main__':
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        filename='logging.txt',
        filemode='w'
    )
    with open('tests.json', 'r', encoding='utf-8') as file:
        tests_dict = json.load(file)

    with open('words.json', 'r', encoding='utf-8') as file:
        words_dict = json.load(file)

    image = Image.open(r'–Ω–∞–≥–∏–µ–≤.png')
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏ —Ç–∞–±–ª–∏—Ü—ã: –æ–¥–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤, –¥—Ä—É–≥–∞—è - –¥–ª—è –ª–∏–º–∏—Ç–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –±–ª–æ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—â–µ –¥—Ä—É–≥–∞—è - –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤.
    create_table_tests()
    create_table_limits()
    create_table_prompts()
    create_table_user_words()
    create_table_all_words()
    logging.info('Tables are created')

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ
    c1 = BotCommand(command='start', description='üöÄ –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º üöÄ')
    c2 = BotCommand(command='help', description='üí° –ü–æ–º–æ—â—å —Å –±–æ—Ç–æ–º üí°')
    c3 = BotCommand(command='menu', description='üñ• –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º üñ•')
    c4 = BotCommand(command='personal_stat', description='üìä –õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä')
    c5 = BotCommand(command='stop_dialog', description='‚õî –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º ‚õî')
    bot.set_my_commands([c1, c2, c3, c4, c5])

    bot.polling()